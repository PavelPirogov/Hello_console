// ДВУМЕРНЫЕ МАССИВЫ



// СТРОКОВЫЕ ДВУМЕРНЫЕ МАССИВЫ
// string[,] table = new string[2, 5]; // [строки, столбцы]
// String.Empty     пустая строка
// // table [0, 0]  table[0, 1]  table[0, 2]  table[0, 4]
// // table [1, 0]  table[1, 1]  table[1, 2]  table[1, 4]
// table[1, 2] = "слово";

// for(int rows = 0; rows<2;rows++)
// {
//     for(int columns = 0;columns<5; columns++)
//     {
//         System.Console.WriteLine($"-{table[rows, columns]}-");
//     }
// }



// ЧИСЛОВЫЕ ДВУМЕРНЫЕ МАССИВЫ
// void PrintArray(int[,] matr)
// {
//     // for (int i = 0; i < 3; i++)
//     for (int i = 0; i < matr.GetLength(0); i++)   // .GetLengths(0) получить количество строк (аргумент 0) массива
//     {
//         // for (int j = 0; j < 4; j++)
//         for (int j = 0; j < matr.GetLength(1); j++)     // .GetLengths(1) получить количество столбцов (аргумент 1) массива
//         {
//             System.Console.Write($"{matr[i, j]} ");
//         }
//         System.Console.WriteLine();
//     }
// }

// void FillArray(int[,] matr)
// {
//     for (int i = 0; i < matr.GetLength(0); i++)   // .GetLengths(0) получить количество строк (аргумент 0) массива
//     {
//         for (int j = 0; j < matr.GetLength(1); j++)     // .GetLengths(1) получить количество столбцов (аргумент 1) массива
//         {
//             matr[i, j] = new Random().Next(1, 10);
//         }
//     }
// }

// int[,] matrix = new int[3, 4];
// PrintArray(matrix);
// FillArray(matrix);
// System.Console.WriteLine();
// PrintArray(matrix);



// РИСУЕМ С ПОМОЩЬЮ ДВУМЕРНОГО МАССИВА
// int[,] pic = new int[,]
// {
//  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
//  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
//  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
//  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
//  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
//  {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
//  {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
//  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// };

// void PrintImage(int[,] image)
// {
//     // for (int i = 0; i < 3; i++)
//     for (int i = 0; i < image.GetLength(0); i++)
//     {
//         // for (int j = 0; j < 4; j++)
//         for (int j = 0; j < image.GetLength(1); j++)
//         {
//             // System.Console.Write($"{image[i, j]} ");
//             if (image[i,j]==0) System.Console.Write(" ");
//             else System.Console.Write("+");
//         }
//         System.Console.WriteLine();
//     }
// }

// void FillImage(int row, int col)
// {
//     if (pic[row, col] == 0)
//     {
//         pic[row, col] = 1;
//         FillImage(row-1, col);      // Метод(функция) вызывает сама себя - это рекурсия
//         FillImage(row, col-1);
//         FillImage(row+1, col);
//         FillImage(row, col+1);
//     }
// }

// // PrintImage(pic);
// FillImage(12, 12);
// PrintImage(pic);



// ВЫЧИСЛЯЕМ ФАКТОРИАЛ С ПОМОЩЬЮ РЕКУРСИИ
//     // 0! = 1
//     // 1! = 1
//     // 2! = 2 * 1
//     // 3! = 3 * 2 * 1      // 3! = 3 * 2!
//     // 4! = 4 * 3 * 2 * 1  // 4! = 4 * 3!
// double Factorial(int n)  // Тип double позволяет решать задачи с бОльшими числами чем int
// {  // у типа данных int происходит переполнение памяти, когда большИе числа
//     if (n == 1) return 1;
//     else return n * Factorial(n - 1);
// }

// // Console.WriteLine(Factorial(6));  // 3! = 3*2*1 = 6

// for (int i = 1; i < 41; i++)
// {
//     System.Console.WriteLine($"{i}! = {Factorial(i)}");
// }



// ЧИСЛА ФИБОНАЧЧИ С ПОМОЩЬЮ РЕКУРСИИ
// f(1) = 1
// f(2) = 1
// f(3) = f(n-1) + f(n-2)
double Fibonacci(int n)
{
    if (n == 1 || n == 2) return 1;
    else return Fibonacci(n - 1) + Fibonacci(n - 2);
}

for (int i = 1; i < 51; i++)
{
    Console.WriteLine($"Сумма первых {i} чисел Фибоначчи = {Fibonacci(i)}");
}
